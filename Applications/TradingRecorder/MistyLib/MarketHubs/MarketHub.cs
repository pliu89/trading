using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Text;

using Misty.Lib.BookHubs;

namespace Misty.Lib.MarketHubs
{
    using Misty.Lib.Hubs;
    using Misty.Lib.Application;
    using Misty.Lib.Products;
    using Misty.Lib.Utilities;

    /// <summary>
    /// The MarketHub is abstract; it cannot be instantiated since it lacks a specific way to connect
    /// to the outside world.  Other classes that know how to communicate with a market API will inherit 
    /// this class.  
    /// The market implementation that inherits MarketHub must:
    ///     1) Implement: void HubEventHandler(EventArgs[] eventArgList)
    ///         Specifically handle each variant of MarketHubRequest, and any other events generated by the API.
    /// </summary>
    public abstract class MarketHub : BookHub, IService
    {
        #region Members
        // *****************************************************************
        // ****                     Members                             ****
        // *****************************************************************
        //
        // Internal infrastructure.
        //      RecycleFactory - Provides recycling for internal messaging. Access provided by protected method "GetRequest()"
        private RecycleFactory<MarketHubRequest> m_RequestFactory = new RecycleFactory<MarketHubRequest>();   


        // Lookup tables:
        //      - Lookup for InstrumentName --> Book[ID]
        protected ConcurrentDictionary<InstrumentName, int> m_InstrumentMarkets = new ConcurrentDictionary<InstrumentName, int>();


        //
        //
        #endregion//Members



        #region Constructors
        // *****************************************************************
        // ****                     Constructors                        ****
        // *****************************************************************
        //
        public MarketHub(string name, string logDirectoryName, bool isShowLog)
            : base(name, logDirectoryName, isShowLog)
        {

        }
        //
        //       
        #endregion//Constructors


        #region no Public Properties
        //
        //
        #endregion // public properties


        #region Public Lookup Methods
        // *****************************************************************
        // ****                     Public Methods                      ****
        // *****************************************************************
        // 
        public bool TryLookupInstrumentID(InstrumentName instrName, out int ID)
        {
            ID = -1;
            if (!m_InstrumentMarkets.TryGetValue(instrName, out ID))
                ID = -1;
            return (ID != -1);
        }//TryLookupInstrumentID()
        //
        #endregion//Public Lookup Methods



        #region Public Request Methods
        // *****************************************************************
        // ****                     Public Methods                      ****
        // *****************************************************************
        /// <summary>
        /// MarketHubs (and others) that communicate with the outside world have a two-layered 
        /// start up routine.  
        /// First, they are created and Start() is called. This begins their 
        /// internal thread and allows them to process requests. 
        /// Second, the function Connect() is called, this initializes the connection 
        /// to the outside world.
        /// </summary>
        public virtual void Connect()
        {
        }
        // ****************************************************************
        // ****                 Request MarketServers()                ****
        // ****************************************************************
        /// <summary>
        /// There may be more than one market server (or gateway) associated with this market hub.
        /// We can request all known servers available.
        /// </summary>
        public virtual bool RequestMarketServers()
        {            
            return this.HubEventEnqueue( GetRequest(MarketHubRequest.RequestType.RequestServers) );
        }
        //
        //
        // ****************************************************************
        // ****                     Request Products()                  ***
        // ****************************************************************
        /// <summary>
        /// Request info about the provided products.
        /// </summary>
        public virtual bool RequestProducts(List<Product> productList)
        {
            MarketHubRequest request = GetRequest(MarketHubRequest.RequestType.RequestProducts);
            request.Data.Add(productList);
            return this.HubEventEnqueue(request);
        }
        /// <summary>
        /// Alternatively request all products with just an exchange name.
        /// </summary>
        public virtual bool RequestProducts(string mktServerName = "")
        {
            MarketHubRequest request = GetRequest(MarketHubRequest.RequestType.RequestProducts);
            if (!string.IsNullOrEmpty(mktServerName))
                request.Data.Add(mktServerName);
            return this.HubEventEnqueue(request);
        }
        //
        // *****************************************************************
        // ****                 Request Instruments()                   ****
        // *****************************************************************
        /// <summary>
        /// There may be more than one instrument associated with a product (such as with
        /// future instruments with differing expirations), request all information about a specific product family.
        /// </summary>
        /// <param name="product">The product family to request all instruments for.</param>
        public virtual bool RequestInstruments(Product product)
        {
            MarketHubRequest request = GetRequest(MarketHubRequest.RequestType.RequestInstruments);
            request.Data.Add(product);
            return this.HubEventEnqueue(request);
        }
        public virtual bool RequestInstruments(InstrumentName instrumentName)
        {
            MarketHubRequest request = GetRequest(MarketHubRequest.RequestType.RequestInstruments);
            request.Data.Add(instrumentName);
            return this.HubEventEnqueue(request);
        }
        //
        //
        // *****************************************************************
        // ****             Request Instrument Subscription             ****
        // *****************************************************************
        public virtual bool RequestInstrumentSubscription(List<InstrumentName> instrumentList)
        {
            MarketHubRequest request = GetRequest(MarketHubRequest.RequestType.RequestInstrumentSubscription);
            foreach (InstrumentName instrument in instrumentList)
                request.Data.Add(instrument);
            return this.HubEventEnqueue(request);
        }
        public virtual bool RequestInstrumentSubscription(InstrumentName instrument)
        {
            MarketHubRequest request = GetRequest(MarketHubRequest.RequestType.RequestInstrumentSubscription);
            request.Data.Add(instrument);
            return this.HubEventEnqueue(request);
        }
        //
        // *****************************************************************
        // ****                     RequestStop()                       ****
        // *****************************************************************
        /// <summary>
        /// Called by an external thread. 
        /// Implements the HubBase abstract method.
        /// </summary>
        public override void RequestStop()
        {
            this.HubEventEnqueue( GetRequest(MarketHubRequest.RequestType.RequestShutdown) );
        }//RequestStop().
        //
        //
        #endregion//Public Methods



        #region Protected Utility Methods
        // *****************************************************************
        // ****                    Private Methods                      ****
        // *****************************************************************
        //
        //
        //
        // 
        // ****                 TryCreateNewBook()                  ****
        //
        /// <summary>
        /// Called by the class that implements the market API when it wants to 
        /// create a new market book usually just before it subscribes to the instrument at the exchange.
        /// Then we it receives mkt update for this instrument, it can use the instrument lookup table to 
        /// see which book its in.
        /// TODO: We need to create our own instrument details table.  Containing: tickSize, tickValue
        /// </summary>
        /// <param name="instr"></param>
        /// <param name="tickSize"></param>
        /// <param name="tickValue"></param>
        /// <param name="marketServerName"></param>
        /// <returns></returns>
        protected bool TryCreateNewBook(InstrumentName instr)
        {
            Market mktInstr = Market.Create(instr);
            int newID = this.AddInstrumentToBook(mktInstr);
            return m_InstrumentMarkets.TryAdd(instr, newID);
        }//TryCreateNewBook()
        //
        //
        // *************************************************************
        // ****                     GetRequest()                    ****
        // *************************************************************
        /// <summary>
        /// This utility method uses the RequestFactory for request to create
        /// and clear a request for new use.
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        protected MarketHubRequest GetRequest(MarketHubRequest.RequestType request)
        {
            MarketHubRequest eventArg = m_RequestFactory.Get();
            eventArg.Request = request;
            eventArg.Data.Clear();
            return eventArg;
        }//GetRequest()
        //
        //
        #endregion // Protected Utility Methods


        #region Events and Triggers
        // *************************************************************
        // ****             Market Status Changed                   ****
        // *************************************************************
        /// <summary>
        /// Reports when markets go "up" or "down."
        /// </summary>
        public event EventHandler MarketStatusChanged;                          
        //
        /// <summary>
        /// This triggers the MarketStatusChanged event.  Subscribers will receive 
        /// the names of the affect markets.
        /// TODO: Right now, the event doesn't say whether the market is up/down.  Perhaps it should, 
        /// or do we require subscribers check its state using a lookup function?
        /// </summary>
        protected void OnMarketStatusChanged(List<string> marketNames)
        {
            if (MarketStatusChanged != null)
            {
                Log.BeginEntry(LogLevel.Minor, "OnMarketStatusChanged:");
                MarketStatusChangedEventArg newEventArg = new MarketStatusChangedEventArg();
                newEventArg.MarketNameList = new List<string>(marketNames);
                foreach (string mktName in marketNames)
                    Log.AppendEntry(" {0}", mktName);
                Log.EndEntry();
                MarketStatusChanged(this, newEventArg);
            }
        }// OnMarketStatusChanged()
        //
        //
        //
        //
        // ************************************************************
        // ****                 Found  Resource                    ****
        // ************************************************************
        /// <summary>
        /// Reports when any new product, instrument, or market is discovered.
        /// </summary>
        public event EventHandler FoundResource;
        /// <summary>
        /// This method must be called by the class that inherits this.  It is triggered
        /// whenever new products are discovered at any exchange.  
        /// There are several overloadings for each of the type of resource that may be found.
        /// </summary>
        /// <param name="products"></param>
        protected void OnMarketFoundResource(List<Misty.Lib.Products.Product> products)
        {
            if (FoundResource != null)                                           
            {
                FoundServiceEventArg arg = new FoundServiceEventArg();
                arg.FoundProducts = products;
                FoundResource(this, arg);
            }
        }// OnMarketFoundResource()
        protected void OnMarketFoundResource(List<Misty.Lib.Products.InstrumentName> instruments)
        {
            if (FoundResource != null)                                          
            {
                FoundServiceEventArg arg = new FoundServiceEventArg();
                arg.FoundInstruments = instruments;
                FoundResource(this, arg);
            }
        }// OnMarketFoundResource()
        //
        //
        //
        //
        //
        #endregion//Market Events



        #region IService implementation
        // *****************************************************
        // ****                 IService                    ****
        // *****************************************************
        //
        public string ServiceName
        {
            get { return this.HubName; }
        }
        public event EventHandler ServiceStateChanged;
        protected void OnServiceStateChanged()
        {
            if (ServiceStateChanged != null)
                ServiceStateChanged(this, EventArgs.Empty);
        }
        //
        //
        //
        #endregion//IService implementation



    }//end class
}